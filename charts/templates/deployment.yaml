apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.NAME }}-kd"
  namespace: "{{ .Values.NAMESPACE }}"
  labels:
    environment: "{{ .Values.NAMESPACE }}"
    app: "{{ .Values.APP }}"
    microservice: "{{ .Values.MICROSERVICE }}"
spec:
  replicas: {{ .Values.K8S_REPLICAS }}
  strategy: 
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.K8S_MAX_UNAVAIL }}
      maxSurge: {{ .Values.K8S_MAX_SURGE }}
  selector:
    matchLabels:
      environment: "{{ .Values.NAMESPACE }}"
      app: "{{ .Values.APP }}"
      microservice: "{{ .Values.MICROSERVICE }}"
  template:
    metadata:
      labels:
        environment: "{{ .Values.NAMESPACE }}"
        app: "{{ .Values.APP }}"
        microservice: "{{ .Values.MICROSERVICE }}"
    spec:
      restartPolicy: Always
      containers:
      - name: "{{ .Values.NAME }}-kc"
        image: "{{ .Values.DOCKER_APP_IMAGE }}"
        ports:
        - containerPort: 8081
        
        resources:
          requests: 
            memory: {{ .Values.K8S_REQ_MEM }}
            cpu: {{ .Values.K8S_REQ_CPU }}
          limits:
            memory: {{ .Values.K8S_LIMIT_MEM }}
            cpu: {{ .Values.K8S_LIMIT_CPU }}
        command: ["sh", "-c"]
        args: 
          - ${GitClone}
        env:
          - name: GitClone
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.Name }}-kcm"
                key: git_clone.sh
        
        startupProbe:
          httpGet:
            path: /healthz
            port: 8081
          failureThreshold: 30
          periodSeconds: 10
        
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 10

        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 10
        